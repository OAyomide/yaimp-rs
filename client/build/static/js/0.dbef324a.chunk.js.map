{"version":3,"sources":["build/index.js"],"names":["cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","getObject","idx","takeObject","ret","dropObject","greet","fib","num","run_fib","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","set","image_stuff","im","ptr0","len0","cachedTextEncoder","TextEncoder","encodeString","encodeInto","view","buf","encode","read","written","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","handle_effect","image_buffer","effect","ptr1","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","len1","r0","r1","v2","monochrome","image_buff","v1","sepia","__wbindgen_string_new","arg0","arg1","obj","addHeapObject","__wbg_alert_f5393de24ed74e50","alert","__wbindgen_object_drop_ref","__widl_f_log_1_","console","log","__wbindgen_throw","Error"],"mappings":"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","file":"static/js/0.dbef324a.chunk.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function greet() {\n    wasm.greet();\n}\n\n/**\n* @param {number} num\n* @returns {number}\n*/\nexport function fib(num) {\n    var ret = wasm.fib(num);\n    return ret;\n}\n\n/**\n* @param {number} num\n*/\nexport function run_fib(num) {\n    wasm.run_fib(num);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} im\n*/\nexport function image_stuff(im) {\n    var ptr0 = passArray8ToWasm0(im, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.image_stuff(ptr0, len0);\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} image_buffer\n* @param {string} effect\n* @returns {Uint8Array | undefined}\n*/\nexport function handle_effect(image_buffer, effect) {\n    var ptr0 = passArray8ToWasm0(image_buffer, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(effect, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.handle_effect(8, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n    }\n    return v2;\n}\n\n/**\n* @param {Uint8Array} image_buff\n* @returns {Uint8Array}\n*/\nexport function monochrome(image_buff) {\n    var ptr0 = passArray8ToWasm0(image_buff, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.monochrome(8, ptr0, len0);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v1 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v1;\n}\n\n/**\n* @param {Uint8Array} image_buff\n* @returns {Uint8Array}\n*/\nexport function sepia(image_buff) {\n    var ptr0 = passArray8ToWasm0(image_buff, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.sepia(8, ptr0, len0);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v1 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v1;\n}\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_alert_f5393de24ed74e50 = function(arg0, arg1) {\n    alert(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __widl_f_log_1_ = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"sourceRoot":""}